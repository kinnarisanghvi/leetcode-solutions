//   public class ListNode {
//       int val;
//       ListNode next;
//       ListNode() {}
//       ListNode(int val) { this.val = val; }
//       ListNode(int val, ListNode next) { this.val = val; this.next = next; }
//   }
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
            // Initializing ResultNode
            ListNode dummyHead = new ListNode(0);
        
            /* Initializing current to dummy head to access the
               current node easily */
            ListNode current = dummyHead;
        
            // Initialize carry to 0
            int carry = 0;
            
            // Loop through lists l1 and l2 until the end of both the lists
             while( l1 != null || l2 != null ) {

                 // Set x to node l1's value. l1 has reached it's end, set to 0.
                 int x = (l1 != null) ? l1.val : 0;
                 
                // Set y to node l2's value. l1 has reached it's end, set to 0.
                 int y = (l2 != null) ? l2.val : 0;
                 
                 // Set sum to x + y + carry
                 int sum = x + y + carry;
                 
                 // Set carry for next node
                 carry = sum / 10;
                 
                 // Create a new node with the digit value of (sum % 10) and set it to current node's next,                                        then advance current node to next.
                 current.next = new ListNode(sum % 10);
                 current = current.next;
                 
                 // Advance l1 and l2
                 if (l1 != null) 
                     l1 = l1.next;
                 
                 if (l2 != null) 
                     l2 = l2.next;
             }
             
             // Check if carry = 1, if so append a new node with digit 1 to dummyHead.
             if (carry > 0) 
                  current.next = new ListNode(carry);
             
            return dummyHead.next;
    }
}

/* Time complexity : O(\max(m, n))O(max(m,n)). Assume that mm and nn represents the length of l1l1 and l2l2 respectively, the algorithm above iterates at most \max(m, n)max(m,n) times.

Space complexity : O(\max(m, n))O(max(m,n)). The length of the new list is at most \max(m,n) + 1max(m,n)+1.
*/
